[slide]
title=Welcome
markdown : '''
# Node.js data processing tutorial


* by [michaelb](http://michaelb.org)

* Developed as an example tutorial for [Whiteboard](http://whiteobard.michaelb.org/)


## Introduction

In this tutorial you'll learn how to use Node.js and Bash to write command-line
tools for transforming data.

**Before you begin**, ensure you have a fairly recent version of
[Node.js](https://nodejs.org/) installed on your system. You should have at
least **version 6** or greater.

> `Ctrl + â†’` or right click to go on to the next slide!
'''

[slide]
layout=vertical
title=fs: reading and writing files
editor=./reading-and-writing/linereverser.js
terminal=./reading-and-writing
markdown : '''

# Using `fs` and `readline`

`fs` is the built-in module for filesystem manipulation in node. We'll be using
this module to *write* data to a file.

`readline` is a built-in helper module that makes it easy to read data
line-by-line from a file. We'll use this to *read* data line-by-line from the
example poem (jabberwocky.txt).

## Working with streams

`fs.createReadStream` and `fs.createWriteStream` are functions built-in to node
that create useful objects that can be used to "read" and "write" from
piece-meal (as opposed to reading the entire file or writing to the file all at
once).

[Full documentation here.](https://nodejs.org/api/stream.html#stream_class_stream_writable)

## readline.createInterface

The key code here is:

```
const readStream = fs.createReadStream(inputPath);
const rl = readline.createInterface({ input: readStream });
```

Here we create a "readable stream" with the input path supplied by the user.
We then hand that readable stream over to the `readline` helper, which will
automatically parse that file into individual lines, making it easy for us to
ingest.


## rl.on('line', ...)

This 'line' event allows us to effectively loop through each line of the file,
handling it line by line.

# Running example file

To test it out, run:

```
node linereverser.js jabberwocky.txt output.txt
```

To check the output, run:
```
node output.txt
```

'''

[slide]
title=Challenge: Comment stripper
terminal=./challenge-strip-comments/
editor : '''
challenge-strip-comments/commentstripper.js
reading-and-writing/linereverser.js
challenge-strip-comments/input.js
challenge-strip-comments/commentstripper-finished.js
'''


[slide]
title=Bonus challenges
terminal=./challenge-csv-to-json/
markdown : '''
Want more? The next challenge is more difficult. It's to convert the given CSV file to
a JSON file.

CSV files look like this:

```
Name,    Language,   Color
Alice,   Python,     Blue
Bob,     JavaScript, Orange
Candice, Rust,       Indigo
```

We want to transform it into a file that looks like this:
```
{"Name": "Alice", "Language": "Python", "Color": "Blue"}
{"Name": "Bob", "Language": "JavaScript", "Color": "Orange"}
{"Name": "Candice", "Language": "Rust", "Color": "Indigo"}
```

**HINT:** Remember to treat the first line differently, since its the title of
each column.

**NOTE:** No solution is provided for this one! You're on your own...
'''

terminal=challenge-csv-to-json
editor : '''
challenge-csv-to-json/csvtojson.js
challenge-csv-to-json/input.csv
reading-and-writing/linereverser.js
'''

[slide]
title=Conclusion
markdown : '''
# That's it! 

This was a very short tutorial. Hope you enjoyed it!

For more programming related content, check out my blog at:
[michaelb.org](http://michaelb.org/). I post regularly about web programming,
video game programming, and GNU/Linux game development.

This tutorial was created as an example tutorial for the slide-show app
[Whiteboard](http://whiteboard.michaelb.org/).
'''
